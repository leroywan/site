{"version":3,"sources":["webpack:///./src/templates/project-post.js"],"names":["BlogPostTemplate","data","location","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","parseAccentText","text","accented","Set","parsed","temp","i","length","char","push","add","forEach","has","className","image1","frontmatter","images","image2","template","themeColor1","colors","themeColor2","themeAccent","description","excerpt","itemScope","itemType","tagline","tags","join","date","style","backgroundImage","overview_title","map","line","overview","html","trim","dangerouslySetInnerHTML","__html","itemProp","to","fields","slug","rel","pageQuery"],"mappings":"2FAAA,8GAmJeA,UA7IU,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKK,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAmBR,EAAnBQ,SAAUC,EAAST,EAATS,KAElB,SAASC,EAAgBC,GAIvB,IAHA,IAAMC,EAAW,IAAIC,IACfC,EAAS,GACXC,EAAO,GACFC,EAAI,EAAGA,EAAIL,EAAKM,OAAQD,IAAK,CACpC,IAAIE,EAAOP,EAAKK,GACH,MAATE,GACFJ,EAAOK,KAAKJ,GACZA,EAAO,IACW,MAATG,GACTJ,EAAOK,KAAKJ,GACZH,EAASQ,IAAIL,GACbA,EAAO,IAEPA,GAAQG,EAWZ,MARa,KAATH,GACFD,EAAOK,KAAKJ,GAEdD,EAAOO,SAAQ,SAACV,EAAMK,GAChBJ,EAASU,IAAIX,KACfG,EAAOE,GAAK,0BAAMO,UAAU,kBAAkBZ,OAG3CG,EAET,IAAMU,EAAM,OAAUtB,EAAKuB,YAAYC,OAAO,GAAlC,IACNC,EAAM,OAAUzB,EAAKuB,YAAYC,OAAO,GAAlC,IAEZ,OACE,kBAAC,IAAD,CACEzB,SAAUA,EACVM,MAAOH,EACPwB,SAAS,WACTC,YAAa3B,EAAKuB,YAAYK,OAAO,GACrCC,YAAa7B,EAAKuB,YAAYK,OAAO,GACrCE,YAAa9B,EAAKuB,YAAYK,OAAO,IAErC,kBAAC,IAAD,CACEvB,MAAOL,EAAKuB,YAAYlB,MACxB0B,YAAa/B,EAAKuB,YAAYQ,aAAe/B,EAAKgC,UAEpD,6BACEX,UAAU,eACVY,WAAS,EACTC,SAAS,6BAET,4BAAQb,UAAU,kBAChB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,qBAAqBrB,EAAKuB,YAAYlB,OACnD,wBAAIgB,UAAU,oBACXb,EAAgBR,EAAKuB,YAAYY,UAGpC,uBAAGd,UAAU,sBACVrB,EAAKuB,YAAYa,KAAKC,KAAK,OAE9B,uBAAGhB,UAAU,sBAAsBrB,EAAKuB,YAAYe,OAEtD,yBAAKjB,UAAU,cACb,yBACEA,UAAU,6BACVkB,MAAO,CACLC,gBAAiBlB,QAM3B,6BAASD,UAAU,oBACjB,yBAAKA,UAAU,YACb,yBAAKA,UAAU,qBACb,uBAAGA,UAAU,qBAAb,YACA,wBAAIA,UAAU,oBACXrB,EAAKuB,YAAYkB,eAAeC,KAAI,SAACC,GAAD,OACnC,6BAAMnC,EAAgBmC,SAI5B,yBAAKtB,UAAU,kBACb,uBAAGA,UAAU,cAAcrB,EAAKuB,YAAYqB,aAIlD,6BAASvB,UAAU,wBACjB,yBACEA,UAAU,eACVkB,MAAO,CACLC,gBAAiBf,MAKD,KAArBzB,EAAK6C,KAAKC,OACT,yBAAKzB,UAAU,4BACb,6BACE0B,wBAAyB,CAAEC,OAAQhD,EAAK6C,MACxCI,SAAS,iBAGX,MAEN,yBAAK5B,UAAU,oBACb,wBAAIA,UAAU,yBACXf,GACC,wBAAIe,UAAU,sDACZ,kBAAC,OAAD,CACEA,UAAU,wBACV6B,GAAI5C,EAAS6C,OAAOC,KACpBC,IAAI,QAEJ,uBAAGhC,UAAU,yBAAb,sBACA,6BAAMf,EAASiB,YAAYlB,SAIhCE,GACC,wBAAIc,UAAU,uDACZ,kBAAC,OAAD,CACEA,UAAU,wBACV6B,GAAI3C,EAAK4C,OAAOC,KAChBC,IAAI,QAEJ,uBAAGhC,UAAU,yBAAb,kBACA,6BAAMd,EAAKgB,YAAYlB,aAYhC,IAAMiD,EAAS","file":"component---src-templates-project-post-js-d4bd5bb410cf830b8b79.js","sourcesContent":["import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const { previous, next } = data;\n\n  function parseAccentText(text) {\n    const accented = new Set();\n    const parsed = [];\n    let temp = \"\";\n    for (let i = 0; i < text.length; i++) {\n      let char = text[i];\n      if (char === \"<\") {\n        parsed.push(temp);\n        temp = \"\";\n      } else if (char === \">\") {\n        parsed.push(temp);\n        accented.add(temp);\n        temp = \"\";\n      } else {\n        temp += char;\n      }\n    }\n    if (temp !== \"\") {\n      parsed.push(temp);\n    }\n    parsed.forEach((text, i) => {\n      if (accented.has(text)) {\n        parsed[i] = <span className=\"text--accented\">{text}</span>;\n      }\n    });\n    return parsed;\n  }\n  const image1 = `url(${post.frontmatter.images[0]})`;\n  const image2 = `url(${post.frontmatter.images[1]})`;\n\n  return (\n    <Layout\n      location={location}\n      title={siteTitle}\n      template=\"projects\"\n      themeColor1={post.frontmatter.colors[0]}\n      themeColor2={post.frontmatter.colors[1]}\n      themeAccent={post.frontmatter.colors[2]}\n    >\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"project-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header className=\"hero-container\">\n          <div className=\"hero\">\n            <div className=\"hero-content\">\n              <p className=\"project__subtitle\">{post.frontmatter.title}</p>\n              <h2 className=\"project__tagline\">\n                {parseAccentText(post.frontmatter.tagline)}\n              </h2>\n              {/* <h1 itemProp=\"headline\">{post.frontmatter.title}</h1> */}\n              <p className=\"hero-content__tags\">\n                {post.frontmatter.tags.join(\", \")}\n              </p>\n              <p className=\"hero-content__date\">{post.frontmatter.date}</p>\n            </div>\n            <div className=\"hero-image\">\n              <div\n                className=\"hero-image-bg splash-image\"\n                style={{\n                  backgroundImage: image1,\n                }}\n              ></div>\n            </div>\n          </div>\n        </header>\n        <section className=\"overview-wrapper\">\n          <div className=\"overview\">\n            <div className=\"overview__heading\">\n              <p className=\"project__subtitle\">Overview</p>\n              <h2 className=\"project__tagline\">\n                {post.frontmatter.overview_title.map((line) => (\n                  <div>{parseAccentText(line)}</div>\n                ))}\n              </h2>\n            </div>\n            <div className=\"overview__body\">\n              <p className=\"project__p\">{post.frontmatter.overview}</p>\n            </div>\n          </div>\n        </section>\n        <section className=\"splash-image-wrapper\">\n          <div\n            className=\"splash-image\"\n            style={{\n              backgroundImage: image2,\n            }}\n          ></div>\n        </section>\n\n        {post.html.trim() !== \"\" ? (\n          <div className=\"blog-post global-wrapper\">\n            <section\n              dangerouslySetInnerHTML={{ __html: post.html }}\n              itemProp=\"articleBody\"\n            />\n          </div>\n        ) : null}\n      </article>\n      <nav className=\"project-post-nav\">\n        <ul className=\"project-post-nav-list\">\n          {previous && (\n            <li className=\"project-post-nav__item project-post-nav__item-left\">\n              <Link\n                className=\"project-post-nav-link\"\n                to={previous.fields.slug}\n                rel=\"prev\"\n              >\n                <p className=\"project-post-nav__tag\">← Previous project</p>\n                <div>{previous.frontmatter.title}</div>\n              </Link>\n            </li>\n          )}\n          {next && (\n            <li className=\"project-post-nav__item project-post-nav__item-right\">\n              <Link\n                className=\"project-post-nav-link\"\n                to={next.fields.slug}\n                rel=\"next\"\n              >\n                <p className=\"project-post-nav__tag\">Next project →</p>\n                <div>{next.frontmatter.title}</div>\n              </Link>\n            </li>\n          )}\n        </ul>\n      </nav>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query ProjectPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        subtitle\n        tagline\n        tags\n        overview_title\n        overview\n        colors\n        images\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}